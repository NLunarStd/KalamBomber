// =================================================================================
// GAME CONSTANTS & VARIABLES
// =================================================================================

const ROWS = 20;
const COLS = 30;
const INITIAL_TIME = 10; // ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
const TIME_BONUS = 10;  // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)

let currentMines;
let board; // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô (‡∏°‡∏µ‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î, ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
let mask;  // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡∏ã‡πà‡∏≠‡∏ô, ‡πÄ‡∏õ‡∏¥‡∏î, ‡∏ò‡∏á)
let gameActive = true;
let firstClick = true;
let score = 0;
let stage = 1;
let minesLeft = 0; // ‡∏ï‡∏±‡∏ß‡∏ô‡∏±‡∏ö‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UI)

let timeRemaining = INITIAL_TIME;
let timerInterval; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Interval ID ‡∏Ç‡∏≠‡∏á Timer

// =================================================================================
// DOM ELEMENTS (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ ID ‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô HTML)
// =================================================================================

const boardGrid = document.getElementById('board-grid');
const stageDisplay = document.getElementById('stage-display');
const minesLeftDisplay = document.getElementById('mines-left-display');
const scoreDisplay = document.getElementById('score-display');
const timerDisplay = document.getElementById('timer-display'); // DOM ‡πÉ‡∏´‡∏°‡πà
const gameOverScreen = document.getElementById('game-over-screen');
const finalScore = document.getElementById('final-score');

// =================================================================================
// TIMER FUNCTIONS
// =================================================================================

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
 */
function startTimer() {
    if (timerInterval) {
        clearInterval(timerInterval);
    }
    
    timerInterval = setInterval(() => {
        if (!gameActive) {
            clearInterval(timerInterval);
            return;
        }

        timeRemaining--;
        timerDisplay.textContent = `${timeRemaining}s`;

        if (timeRemaining <= 0) {
            clearInterval(timerInterval);
            timeIsUp(); 
        }
    }, 1000);
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏ö‡∏ô‡∏±‡∏™
 */
function addTimeBonus() {
    timeRemaining += TIME_BONUS;
    timerDisplay.textContent = `${timeRemaining}s`;
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î
 */
function timeIsUp() {
    if (gameActive) {
        // -1, -1 ‡πÅ‡∏•‡∏∞ timedOut=true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÅ‡∏û‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î
        gameOver(-1, -1, true); 
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î Timer
 */
function stopTimer() {
    if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
    }
}

// =================================================================================
// GAME LOGIC FUNCTIONS
// =================================================================================

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡∏£‡∏≠‡∏ö‡πÜ ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î
 */
function calculateNumbers() {
    for (let r = 0; r < ROWS; r++) {
        for (let c = 0; c < COLS; c++) {
            if (board[r][c] === 'mine') continue;

            let mineCount = 0;
            
            for (let dr = -1; dr <= 1; dr++) {
                for (let dc = -1; dc <= 1; dc++) {
                    if (dr === 0 && dc === 0) continue; 

                    const nr = r + dr;
                    const nc = c + dc;
                    
                    if (nr >= 0 && nr < ROWS && nc >= 0 && nc < COLS) {
                        if (board[nr][nc] === 'mine') {
                            mineCount++;
                        }
                    }
                }
            }
            board[r][c] = mineCount;
        }
    }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏á‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏° ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
 */
function placeMines(firstRow, firstCol) {
    let minesPlaced = 0;
    while (minesPlaced < currentMines) {
        const r = Math.floor(Math.random() * ROWS);
        const c = Math.floor(Math.random() * COLS);
        
        // ‡πÄ‡∏ß‡πâ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà 3x3 ‡∏£‡∏≠‡∏ö‡∏à‡∏∏‡∏î‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏£‡∏Å
        if (board[r][c] !== 'mine' && 
            (Math.abs(r - firstRow) > 1 || Math.abs(c - firstCol) > 1)) { 
            
            board[r][c] = 'mine';
            minesPlaced++;
        }
    }
    
    calculateNumbers();
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏ä‡πà‡∏≠‡∏á (Recursive)
 */
function revealCell(r, c) {
    if (r < 0 || r >= ROWS || c < 0 || c >= COLS || mask[r][c] !== 'concealed') return;
    
    mask[r][c] = 'opened';
    score += 100; 
    scoreDisplay.textContent = score;

    const cellElement = document.querySelector(`.cell[data-row="${r}"][data-col="${c}"]`);
    cellElement.classList.add('opened');
    
    const value = board[r][c];
    
    if (value > 0) {
        cellElement.textContent = value;
        cellElement.classList.add(`num-${value}`);
    } 
    
    // ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏•‡∏π‡∏Å‡πÇ‡∏ã‡πà (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 0)
    if (value === 0) {
        for (let dr = -1; dr <= 1; dr++) {
            for (let dc = -1; dc <= 1; dc++) {
                revealCell(r + dr, c + dc); 
            }
        }
    }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≤‡∏¢ (‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á)
 */
function handleLeftClick(event) {
    if (!gameActive) return;

    const r = parseInt(event.target.dataset.row);
    const c = parseInt(event.target.dataset.col);

    if (mask[r][c] === 'flagged' || mask[r][c] === 'opened') return;
    
    // 1. ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å: ‡∏ß‡∏≤‡∏á‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° Timer
    if (firstClick) {
        placeMines(r, c);
        firstClick = false;
        startTimer(); // <<< ‡πÄ‡∏£‡∏¥‡πà‡∏° Timer
    }
    
    // 2. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î: ‡πÅ‡∏û‡πâ!
    if (board[r][c] === 'mine') {
        gameOver(r, c);
        return;
    }
    
    // 3. ‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á
    const initialScore = score;
    revealCell(r, c);
    
    // 4. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏ö‡∏ô‡∏±‡∏™: ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô (‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ä‡πà‡∏≠‡∏á)
    if (score > initialScore) {
        addTimeBonus();
    }
    
    // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ä‡∏ô‡∏∞
    checkWinCondition();
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤ (‡∏õ‡∏±‡∏Å‡∏ò‡∏á)
 */
function handleRightClick(event) {
    event.preventDefault(); 
    if (!gameActive) return;

    const r = parseInt(event.target.dataset.row);
    const c = parseInt(event.target.dataset.col);
    const cellElement = event.target;

    if (mask[r][c] === 'opened') return;

    if (mask[r][c] === 'concealed') {
        mask[r][c] = 'flagged';
        cellElement.classList.add('flagged');
        cellElement.textContent = 'üö©';
        minesLeft--; 
    } else if (mask[r][c] === 'flagged') {
        mask[r][c] = 'concealed';
        cellElement.classList.remove('flagged');
        cellElement.textContent = '';
        minesLeft++; 
    }
    minesLeftDisplay.textContent = minesLeft;
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
function checkWinCondition() {
    let uncoveredSafeCells = 0;
    const totalSafeCells = (ROWS * COLS) - currentMines;
    
    for (let r = 0; r < ROWS; r++) {
        for (let c = 0; c < COLS; c++) {
            if (mask[r][c] === 'opened' && board[r][c] !== 'mine') {
                uncoveredSafeCells++;
            }
        }
    }
    
    if (uncoveredSafeCells === totalSafeCells) {
        // ‡∏ä‡∏ô‡∏∞‡∏î‡πà‡∏≤‡∏ô! ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
        gameActive = false;
        stopTimer(); // ‡∏´‡∏¢‡∏∏‡∏î Timer ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        stage++;
        
        const nextMines = Math.min(120 + (stage - 1) * 10, 300);
        alert(`Stage ${stage - 1} Cleared! Preparing for Stage ${stage} with ${nextMines} mines!`);
        
        initializeGame(); 
    }
}

/**
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå Game Over
 * @param {number} hitRow ‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î
 * @param {number} hitCol ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î
 * @param {boolean} timedOut ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÅ‡∏û‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 */
function gameOver(hitRow, hitCol, timedOut = false) {
    gameActive = false;
    stopTimer(); // ‡∏´‡∏¢‡∏∏‡∏î Timer
    
    // ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    for (let r = 0; r < ROWS; r++) {
        for (let c = 0; c < COLS; c++) {
            const cellElement = document.querySelector(`.cell[data-row="${r}"][data-col="${c}"]`);
            if (board[r][c] === 'mine') {
                cellElement.classList.add('mine');
                cellElement.textContent = 'üí£';
                cellElement.classList.remove('flagged'); 
            }
            // ‡∏•‡∏ö Event Listeners ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô
            cellElement.removeEventListener('click', handleLeftClick);
            cellElement.removeEventListener('contextmenu', handleRightClick);
        }
    }
    
    // ‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏•‡∏¥‡∏Å‡πÇ‡∏î‡∏ô (‡∏ñ‡πâ‡∏≤‡πÅ‡∏û‡πâ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î)
    if (!timedOut) {
        const hitCell = document.querySelector(`.cell[data-row="${hitRow}"][data-col="${hitCol}"]`);
        if (hitCell) hitCell.style.backgroundColor = 'darkred';
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ Game Over
    finalScore.textContent = score;
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Game Over
    const h2Element = document.querySelector('#game-over-screen h2');
    const pElement = document.querySelector('#game-over-screen p:nth-child(2)');
    
    if (timedOut) {
        h2Element.textContent = 'TIME IS UP!';
        pElement.textContent = 'You ran out of time!';
    } else {
        h2Element.textContent = 'GAME OVER!';
        pElement.textContent = 'You detonated a **Kalam Bomb**!';
    }
    
    gameOverScreen.classList.remove('hidden');
    
    console.log(`Final Score for Leaderboard: ${score}`);
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Å‡∏°/‡∏î‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
function initializeGame() {
    // 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏¥‡∏î‡∏ï‡∏≤‡∏° Difficulty Progression
    currentMines = Math.min(120 + (stage - 1) * 10, 300);
    minesLeft = currentMines;
    
    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô (board) ‡πÅ‡∏•‡∏∞‡∏°‡∏≤‡∏™‡∏Å‡πå (mask)
    board = Array(ROWS).fill(0).map(() => Array(COLS).fill(0));
    mask = Array(ROWS).fill(0).map(() => Array(COLS).fill('concealed'));
    
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô DOM
    boardGrid.innerHTML = ''; 
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    gameActive = true;
    firstClick = true;
    
    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Timer 
    stopTimer(); 
    timeRemaining = INITIAL_TIME; 

    // 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    stageDisplay.textContent = stage;
    minesLeftDisplay.textContent = minesLeft;
    scoreDisplay.textContent = score; 
    timerDisplay.textContent = `${timeRemaining}s`;
    
    // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Cell Element ‡πÉ‡∏ô DOM
    for (let r = 0; r < ROWS; r++) {
        for (let c = 0; c < COLS; c++) {
            const cell = document.createElement('div');
            cell.classList.add('cell');
            cell.dataset.row = r;
            cell.dataset.col = c;
            
            cell.addEventListener('click', handleLeftClick);
            cell.addEventListener('contextmenu', handleRightClick);
            
            boardGrid.appendChild(cell);
        }
    }
}

// =================================================================================
// STARTUP
// =================================================================================

document.addEventListener('DOMContentLoaded', () => {
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡∏ß‡∏≤‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô
    boardGrid.addEventListener('contextmenu', (e) => e.preventDefault()); 
    initializeGame();

});

